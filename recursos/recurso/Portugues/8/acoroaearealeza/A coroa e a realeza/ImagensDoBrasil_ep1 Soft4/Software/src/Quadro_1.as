package src{	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.SimpleButton;	import flash.accessibility.AccessibilityProperties;	import flash.text.TextField;	import flash.text.Font;	import flash.text.TextFormat;	import flash.text.TextFieldAutoSize;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.net.navigateToURL;	import flash.display.Sprite;	import flash.display.BitmapData;		import src.*;		public class Quadro_1 extends MovieClip	{		public var numeroQuadro:Number = 1;		private var objetoPrincipal:Object;		var myFont:Font = new Candara();		var myFormat:TextFormat = new TextFormat();		var larguraFonte:Number;		var alturaFonte:Number;				var myTextField:TextField;				//var alturaTexto_1:Number;		//var alturaTexto_2:Number;		public function Quadro_1 ():void		{			//garante que os objetos globais de Principal (como o vetor de caminha de imagem) estejam carregados, depois monta o swf.			addEventListener (Event.ADDED_TO_STAGE, iniciar);			bot.addEventListener (MouseEvent.CLICK, botFunction);			//stage.addEventListener();			//stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler2);			// Coloca a função para mostrar a janela de ajuda no botão do menu Ajuda			//sair_btn.addEventListener (MouseEvent.CLICK,sairFunction);			//creditos.addEventListener (MouseEvent.CLICK,abreJanela);			//ajuda.addEventListener (MouseEvent.CLICK,abreJanela);			//guia.addEventListener (MouseEvent.CLICK, clickGuia);		}		function iniciar (evt:Event)		{			objetoPrincipal =  parent.parent.parent;						objetoPrincipal.iniciaPosicoes ();						objetoPrincipal.proxima.removeEventListener(MouseEvent.CLICK, objetoPrincipal.proximaFC);			objetoPrincipal.proxima.enabled = false;						objetoPrincipal.pulse.visible = false;						mostraTextos ();		}				function mostraTextos ()		{			for (var i = 1;i<=2 ;i++)			{				removeObjetoPeloNomeLocal("texto_marcador_"+String(i));			}						montaSubTitulo (objetoPrincipal.xmlEstrutura.nome, 620, 100, marcador_2, 35);			montaSubTitulo (objetoPrincipal.xmlEstrutura.introducao, 600, 150, marcador_1, 28);					}				function montaSubTitulo (txt:String, largura:Number, altura:Number, marcador:Object, fontSize:Number)		{			formatText (achaTamanhoFonteAltura(txt, largura, altura, fontSize));			myTextField = new TextField();			myTextField.defaultTextFormat = myFormat;			myTextField.htmlText = objetoPrincipal.acertaTags(txt);			//myTextField.background = true;			myTextField.height = altura;			myTextField.width = largura;			myTextField.multiline = false;			myTextField.wordWrap = true;			myTextField.x = marcador.x;			myTextField.y = marcador.y;			myTextField.name = "texto_" + marcador.name;			myTextField.selectable = false;						addChildAt (myTextField, getChildIndex(getChildByName(marcador.name)));						//var nMarcador:String = marcador.name.slice(9);			//this["alturaTexto_"+nMarcador] = myTextField.numLines;		}		/*		public function mostraTamanho (nome:String):Number		{			var teste:Number = 0;			if (getChildByName(nome) != null)			{				//trace ("Mostra Tamanho ***");				//trace (getChildByName(nome).height, getChildByName(nome).name);				return (getChildByName(nome).numLines);			}			else			{				return (teste);			}					}		public function cortaLinha (nome:String)		{			if (getChildByName(nome) != null)			{				var fonteMenor:TextFormat = new TextFormat();				fonteMenor = getChildByName(nome).getTextFormat();								trace(fonteMenor.size);								fonteMenor.size = Number(fonteMenor.size) - 3;								trace ("CortaLinha = "+getChildByName(nome).name, fonteMenor.size);								//TextField[nome].autoSize = TextFieldAutoSize.CENTER;				getChildByName(nome).defaultTextFormat = fonteMenor;				getChildByName(nome).htmlText = objetoPrincipal.acertaTags(getChildByName(nome).text);			}		}		*/		function achaTamanhoFonteAltura (txt:String, larguraTexto:Number, altura:Number, fonteInicial:Number):Number		{			var tamanhoGrande:Boolean = true;			var valorTamanhoFonte:Number = fonteInicial;			while (tamanhoGrande == true)			{				formatText (valorTamanhoFonte);				var tfTesteTamanho:TextField = new TextField();				//tfTesteTamanho.autoSize = TextFieldAutoSize.CENTER;				tfTesteTamanho.defaultTextFormat = myFormat;				tfTesteTamanho.embedFonts = true;				tfTesteTamanho.text = txt;				tfTesteTamanho.width = larguraTexto;				tfTesteTamanho.multiline = true;				tfTesteTamanho.wordWrap = true;				if (tfTesteTamanho.textHeight  > altura)				{					valorTamanhoFonte--;				}				else				{					tamanhoGrande = false;				}							}			alturaFonte = tfTesteTamanho.height;			//trace (alturaFonte, valorTamanhoFonte);			return valorTamanhoFonte;		}		function formatText (tamanho:Number)		{			myFormat.font = myFont.fontName;			myFormat.size = tamanho;			myFormat.align = "center";			myFormat.color = 0x333333;		}				function achaTamanhoFonte (txt:String, tamanho:Number, fonteInicial:Number):Number		{			var tamanhoGrande:Boolean = true;			var valorTamanhoFonte:Number = fonteInicial;			while (tamanhoGrande == true)			{				formatText (valorTamanhoFonte);				var tfTesteTamanho:TextField = new TextField();				tfTesteTamanho.autoSize = TextFieldAutoSize.CENTER;				tfTesteTamanho.defaultTextFormat = myFormat;				tfTesteTamanho.embedFonts = true;				tfTesteTamanho.text = txt;				if (tfTesteTamanho.width  > tamanho)				{					valorTamanhoFonte--;				}				else				{					tamanhoGrande = false;				}							}			larguraFonte = tfTesteTamanho.width;			//trace (larguraFonte, valorTamanhoFonte);			return valorTamanhoFonte;		}								function botFunction (evt:MouseEvent)		{			objetoPrincipal.aparece (2);		}		function clickGuia (evt:MouseEvent)		{			var path:URLRequest;			var caminhoString:String = objetoPrincipal.xmlSWF.vetCaminho[objetoPrincipal.xmlSWF.vetCaminho.length-3];			//trace (objetoPrincipal.xmlSWF.vetCaminho[objetoPrincipal.xmlSWF.vetCaminho.length-3]);			path = new URLRequest(caminhoString);			path.url = caminhoString;			navigateToURL (path);		}		function removeObjetoPeloNomeLocal (nome:String)		{			//verifica se objeto existe e se sim, o remove.			if (getChildByName(nome) != null)			{				removeChild (getChildByName(nome));			}		}		function abreJanela (evt:MouseEvent)		{			var nome:String;			nome = evt.target.name;			//objetoPrincipal.mostraJanela (nome);			objetoPrincipal.quadroAtual = numeroQuadro;			if (nome == "creditos")			{				objetoPrincipal.aparece (objetoPrincipal.xmlSWF.vetCaminho.length-1);			}			else			{				objetoPrincipal.aparece (objetoPrincipal.xmlSWF.vetCaminho.length);			}		}		function sairFunction (evt:MouseEvent)		{			objetoPrincipal.sair ();		}	}}